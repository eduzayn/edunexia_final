/**
 * AUTENTICA√á√ÉO SIMPLES PARA EMERG√äNCIAS
 * 
 * Este m√≥dulo implementa rotas de autentica√ß√£o de emerg√™ncia simples
 * que substituem completamente o sistema de autentica√ß√£o existente
 * para permitir acesso ao sistema em situa√ß√µes cr√≠ticas.
 * 
 * ATEN√á√ÉO: Esta √© uma configura√ß√£o de emerg√™ncia que permite login com qualquer usu√°rio
 * sem verifica√ß√£o de senha. Use apenas para recupera√ß√£o de acesso.
 */

import express from 'express';
import { Express } from "express";
import { db } from './db';
import { users } from '@shared/schema';
import { eq } from 'drizzle-orm';

export function setupSimpleAuth(app: Express) {
  // ======= LOGIN DIRETO EM MODO EMERG√äNCIA =======
  app.get('/admin-login-direto', async (req, res) => {
    console.log('üö®üö®üö® ACESSO EMERGENCIAL: Login direto para admin foi solicitado');
    
    try {
      // Buscar o usu√°rio admin diretamente
      const [adminUser] = await db.select().from(users).where(eq(users.username, 'admin'));
      
      if (!adminUser) {
        console.error('‚ùå ACESSO EMERGENCIAL: Usu√°rio admin n√£o encontrado no banco de dados!');
        return res.status(500).send(`
          <h1>Erro: Usu√°rio admin n√£o encontrado</h1>
          <p>O usu√°rio 'admin' n√£o foi encontrado no banco de dados.</p>
          <a href="/">Voltar para o in√≠cio</a>
        `);
      }
      
      // Configurar a sess√£o manualmente e redirecionar
      if (!req.session) {
        req.session = {} as any;
      }
      
      req.session.user = adminUser;
      req.session.authenticated = true;
      
      console.log('‚úÖ ACESSO EMERGENCIAL: Login direto para admin foi bem-sucedido!');
      
      // Redirecionar para a p√°gina inicial
      return res.redirect('/admin');
    } catch (error) {
      console.error('‚ùå ACESSO EMERGENCIAL: Erro ao fazer login direto:', error);
      return res.status(500).send(`
        <h1>Erro ao fazer login direto</h1>
        <p>Ocorreu um erro ao tentar fazer login direto: ${error}</p>
        <a href="/">Voltar para o in√≠cio</a>
      `);
    }
  });

  // Rota para autentica√ß√£o de emerg√™ncia
  app.post('/api-json/login', async (req, res) => {
    try {
      const { username, password } = req.body;
      
      console.log('üî• MODO DE EMERG√äNCIA: Requisi√ß√£o de login para:', username);
      
      // Buscar o usu√°rio no banco de dados para obter informa√ß√µes completas
      const [userFromDb] = await db.select().from(users).where(eq(users.username, username));
      
      // ‚ö†Ô∏è MODO INSEGURO: Aceitar qualquer usu√°rio que exista no banco de dados
      // ‚ö†Ô∏è Implementa√ß√£o tempor√°ria para recupera√ß√£o de acesso ao sistema
      if (username) {
        console.log('üî• MODO DE EMERG√äNCIA: Tentando autenticar usu√°rio:', username);
        
        let user;
        
        // Se o usu√°rio existe no banco de dados, use seus dados reais
        if (userFromDb) {
          console.log('üî• MODO DE EMERG√äNCIA: Usu√°rio encontrado no banco de dados');
          console.log('üî• MODO DE EMERG√äNCIA: IGNORANDO VERIFICA√á√ÉO DE SENHA');
          user = userFromDb;
        } else {
          console.log('‚ùå MODO DE EMERG√äNCIA: Usu√°rio n√£o encontrado no banco de dados');
          // Se n√£o encontrar o usu√°rio, retorne erro
          return res.status(401).json({ message: 'Invalid credentials' });
        }
        
        // Configurar a sess√£o manualmente - isso √© uma simplifica√ß√£o extrema!
        if (!req.session) {
          req.session = {} as any;
        }
        
        req.session.user = user;
        req.session.authenticated = true;
        
        console.log('‚úÖ AUTENTICA√á√ÉO DE EMERG√äNCIA: Login bem-sucedido para', username);
        
        // Remover a senha antes de retornar ao cliente
        const { password: _, ...userWithoutPassword } = user;
        
        return res.status(200).json(userWithoutPassword);
      }
      
      console.log('‚ùå AUTENTICA√á√ÉO DE EMERG√äNCIA: Credenciais inv√°lidas');
      return res.status(401).json({ message: 'Invalid credentials' });
    } catch (error) {
      console.error('‚ùå AUTENTICA√á√ÉO DE EMERG√äNCIA: Erro:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Rota para verificar o usu√°rio atual
  app.get('/api-json/user', (req, res) => {
    try {
      console.log('üö® AUTENTICA√á√ÉO DE EMERG√äNCIA: Verificando autentica√ß√£o');
      
      // Verificar se h√° um usu√°rio na sess√£o
      if (req.session && req.session.user && req.session.authenticated) {
        console.log('‚úÖ AUTENTICA√á√ÉO DE EMERG√äNCIA: Usu√°rio autenticado', req.session.user.username);
        return res.status(200).json(req.session.user);
      }
      
      console.log('‚ùå AUTENTICA√á√ÉO DE EMERG√äNCIA: Usu√°rio n√£o autenticado');
      return res.status(401).json({ message: 'Not authenticated' });
    } catch (error) {
      console.error('‚ùå AUTENTICA√á√ÉO DE EMERG√äNCIA: Erro:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
  
  // Rota para logout
  app.post('/api-json/logout', (req, res) => {
    try {
      console.log('üö® AUTENTICA√á√ÉO DE EMERG√äNCIA: Logout');
      
      if (req.session) {
        // Destruir a sess√£o
        req.session.destroy((err) => {
          if (err) {
            console.error('‚ùå AUTENTICA√á√ÉO DE EMERG√äNCIA: Erro ao destruir sess√£o:', err);
            return res.status(500).json({ message: 'Error during logout' });
          }
          
          console.log('‚úÖ AUTENTICA√á√ÉO DE EMERG√äNCIA: Logout bem-sucedido');
          res.status(200).json({ message: 'Logged out successfully' });
        });
      } else {
        console.log('‚úÖ AUTENTICA√á√ÉO DE EMERG√äNCIA: Nenhuma sess√£o para destruir');
        res.status(200).json({ message: 'No session to destroy' });
      }
    } catch (error) {
      console.error('‚ùå AUTENTICA√á√ÉO DE EMERG√äNCIA: Erro:', error);
      return res.status(500).json({ message: 'Internal server error' });
    }
  });
}