// Estrutura inicial do Módulo Pedagógico - Edunéxia

// 1. Página de conteúdo da disciplina
// File: pages/admin/academico/disciplinas/[id]/content.tsx

import { VideoManager } from "@/components/disciplinas/VideoManager";
import { EbookManager } from "@/components/disciplinas/EbookManager";
import { InteractiveEbookManager } from "@/components/disciplinas/InteractiveEbookManager";
import { SimuladoManager } from "@/components/disciplinas/SimuladoManager";
import { AvaliacaoFinalManager } from "@/components/disciplinas/AvaliacaoFinalManager";
import { CompletenessChecker } from "@/components/disciplinas/CompletenessChecker";

export default function DisciplinaContentPage() {
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">Gerenciar conteúdo pedagógico da disciplina</h1>

      <CompletenessChecker />

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <VideoManager />
        <EbookManager />
        <InteractiveEbookManager />
        <SimuladoManager />
        <AvaliacaoFinalManager />
      </div>
    </div>
  );
}

// 2. Componentes (starter code)

// File: components/disciplinas/VideoManager.tsx
export function VideoManager() {
  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">Vídeo-aulas</h2>
      {/* Upload ou embed de vídeo */}
      <button className="btn">Adicionar vídeo</button>
      {/* Listagem dos vídeos */}
    </section>
  );
}

// File: components/disciplinas/EbookManager.tsx
export function EbookManager() {
  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">E-book Estático</h2>
      {/* Upload ou link de PDF */}
      <button className="btn">Adicionar e-book</button>
      {/* Visualização do PDF */}
    </section>
  );
}

// File: components/disciplinas/InteractiveEbookManager.tsx
export function InteractiveEbookManager() {
  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">E-book Interativo</h2>
      {/* Inserir link de Drive/Dropbox/YouTube/Vimeo */}
      <button className="btn">Adicionar e-book interativo</button>
      {/* Visualização adaptativa */}
    </section>
  );
}

// File: components/disciplinas/SimuladoManager.tsx
export function SimuladoManager() {
  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">Simulado</h2>
      {/* CRUD de questões até 30 */}
      <button className="btn">Adicionar questão</button>
      {/* Listagem de questões */}
    </section>
  );
}

// File: components/disciplinas/AvaliacaoFinalManager.tsx
export function AvaliacaoFinalManager() {
  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">Avaliação Final</h2>
      {/* CRUD de questões até 10 */}
      <button className="btn">Adicionar questão</button>
      {/* Listagem de questões */}
    </section>
  );
}

// File: components/disciplinas/CompletenessChecker.tsx
export function CompletenessChecker() {
  return (
    <div className="bg-purple-100 p-4 rounded">
      <p className="text-sm">Complete todos os elementos pedagógicos obrigatórios para liberar esta disciplina para uso nos cursos.</p>
    </div>
  );
}

// 3. Serviço de integração com API

// File: services/disciplinasService.ts

const API_BASE = "/api/disciplinas";

export const disciplinasService = {
  // Vídeos
  listarVideos: (disciplinaId: string) => fetch(`${API_BASE}/${disciplinaId}/videos`).then(res => res.json()),
  adicionarVideo: (disciplinaId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/videos`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),
  removerVideo: (disciplinaId: string, videoId: string) => fetch(`${API_BASE}/${disciplinaId}/videos/${videoId}`, { method: "DELETE" }),

  // E-book Estático
  buscarEbookEstatico: (disciplinaId: string) => fetch(`${API_BASE}/${disciplinaId}/ebook-estatico`).then(res => res.json()),
  adicionarEbookEstatico: (disciplinaId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/ebook-estatico`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),

  // E-book Interativo
  buscarEbookInterativo: (disciplinaId: string) => fetch(`${API_BASE}/${disciplinaId}/ebook-interativo`).then(res => res.json()),
  adicionarEbookInterativo: (disciplinaId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/ebook-interativo`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),

  // Simulado
  listarSimulado: (disciplinaId: string) => fetch(`${API_BASE}/${disciplinaId}/simulado`).then(res => res.json()),
  adicionarQuestaoSimulado: (disciplinaId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/simulado`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),
  atualizarQuestaoSimulado: (disciplinaId: string, questaoId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/simulado/${questaoId}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),
  removerQuestaoSimulado: (disciplinaId: string, questaoId: string) => fetch(`${API_BASE}/${disciplinaId}/simulado/${questaoId}`, { method: "DELETE" }),

  // Avaliação Final
  listarAvaliacaoFinal: (disciplinaId: string) => fetch(`${API_BASE}/${disciplinaId}/avaliacao-final`).then(res => res.json()),
  adicionarQuestaoAvaliacaoFinal: (disciplinaId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/avaliacao-final`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),
  atualizarQuestaoAvaliacaoFinal: (disciplinaId: string, questaoId: string, data: any) => fetch(`${API_BASE}/${disciplinaId}/avaliacao-final/${questaoId}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(data) }).then(res => res.json()),
  removerQuestaoAvaliacaoFinal: (disciplinaId: string, questaoId: string) => fetch(`${API_BASE}/${disciplinaId}/avaliacao-final/${questaoId}`, { method: "DELETE" }),

  // Completude
  checarCompletude: (disciplinaId: string) => fetch(`${API_BASE}/${disciplinaId}/completude`).then(res => res.json()),
};