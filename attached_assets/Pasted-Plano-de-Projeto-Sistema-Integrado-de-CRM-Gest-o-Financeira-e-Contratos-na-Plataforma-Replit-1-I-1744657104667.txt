Plano de Projeto: Sistema Integrado de CRM, Gestão Financeira e Contratos na Plataforma Replit
1. Introdução e Visão Geral do Sistema

Propósito do Sistema: Este documento detalha o plano de projeto para o desenvolvimento de uma aplicação web que fornecerá funcionalidades essenciais para Gestão de Relacionamento com o Cliente (CRM), Gestão Financeira (incluindo Faturamento, Pagamentos e Checkout com múltiplos gateways) e Gestão de Contratos.
Ambiente de Desenvolvimento: O sistema será desenvolvido, implantado e hospedado exclusivamente na plataforma Replit.com. Serão aproveitados seu ambiente de desenvolvimento integrado, add-ons de banco de dados, gerenciamento de segredos (secrets), recursos de colaboração e capacidades de implantação (deployment).
Contexto Arquitetural: O sistema é concebido como um módulo destinado a integrar-se com um sistema maior e pré-existente. Um ponto crucial é que a autenticação de usuários e o gerenciamento primário de identidade são tratados por este sistema externo. Nossa aplicação consumirá o contexto de identidade e autorização do usuário fornecido pelo sistema externo através de requisições à API.
Inspiração e Clarificação do Escopo: Embora conceitualmente inspirado por módulos inferidos de plataformas como Edunext (áreas gerais de funcionalidades mencionadas em documentação geral ), as funcionalidades específicas e a implementação seguirão estritamente a definição do MVP (Produto Mínimo Viável) delineada na Seção 2. A consistente falta de documentação detalhada e acessível das APIs do Edunext  torna inviável basear o design em uma replicação direta. Portanto, a abordagem de design priorizará os requisitos explícitos do usuário e as melhores práticas gerais para sistemas de CRM, Financeiro e Contratos, em vez de tentar mimetizar uma implementação desconhecida do Edunext. A "inspiração" serve apenas como contexto de alto nível.   
Resumo da Pilha Tecnológica: Frontend: React/Vite (TypeScript). Backend: Node.js/NestJS (TypeScript). Banco de Dados: PostgreSQL (Replit Add-on) com Prisma ORM.
2. Definição da Funcionalidade do MVP

Esta seção detalha as funcionalidades essenciais requeridas para o Produto Mínimo Viável (MVP), focando exclusivamente na proposição de valor central para CRM, Gestão Financeira e Gestão de Contratos.

2.1. Módulo CRM:
Gestão de Leads:
Operações CRUD (Create, Read, Update, Delete) para Leads.
Campos: Nome, Email, Telefone, Fonte (Origem), Status (ex: Novo, Contactado, Qualificado, Perdido, Convertido), externalUserId (proprietário/responsável vindo do sistema externo).
Visualização simples em estilo Kanban ou lista com filtros/ordenação por status (Funil/Status).
Funcionalidade para converter um Lead 'Qualificado' em um Client, Contact, e potencialmente um rascunho de Contract ou Invoice.
Gestão de Clientes:
Operações CRUD para Clientes (representando organizações ou indivíduos que são clientes).
Campos: Nome, Email de Contato Principal, Telefone, Endereço, externalUserId (gerente da conta/proprietário vindo do sistema externo), campo básico para histórico/notas.
Gestão de Contatos:
Operações CRUD para Contatos (indivíduos associados a Clientes).
Campos: Nome, Email, Telefone, Cargo/Título, associação com um Client.
2.2. Módulo de Gestão Financeira:
Gestão de Produtos/Serviços e Tabelas de Preços:
CRUD para entidades ProductService simples (representando itens faturáveis).
Campos: Nome, Descrição, Preço Padrão.
(Opcional - Pós-MVP ou Stretch Goal) Conceito básico de PriceTable: CRUD para Tabelas de Preços, permitindo associar itens ProductService com preços potencialmente diferentes dentro de uma tabela. Faturas poderiam opcionalmente referenciar uma Tabela de Preços.
Gestão de Faturas:
Criação manual de registros de Invoice.
Associação com um Client (obrigatório) e opcionalmente com um Contract.
Campos: Número da Fatura (auto-gerado ou manual), Data de Emissão, Data de Vencimento, Status (Rascunho, Enviada, Paga, Vencida, Cancelada), Valor Total, externalUserId (criador/proprietário vindo do sistema externo).
Capacidade de adicionar/remover InvoiceItems a uma Fatura (vinculando a ProductService, quantidade, preço unitário, preço total da linha).
Geração básica de PDF ou visualização imprimível de uma fatura.
Registro de Pagamentos:
Operações CRUD manuais para registros de Payment.
Campos: Valor Recebido, Data do Pagamento, Método de Pagamento (ex: Transferência Bancária, Cartão de Crédito Manual, GatewayX), Número de Referência, associação com uma ou mais Invoices.
Lógica para atualizar o status da Invoice associada com base nos pagamentos recebidos (ex: mover para 'Paga' se totalmente quitada).
Funcionalidade da API de Checkout:
Um endpoint de API (/invoices/{id}/checkout) para iniciar o processo de pagamento para uma fatura específica. Este endpoint interagirá com a API do gateway de pagamento escolhido.
2.3. Integração de Gateway de Pagamento:
Pesquisa e Seleção: Investigar e selecionar pelo menos um gateway de pagamento popular adequado ao mercado alvo (ex: Stripe, MercadoPago). Fatores: qualidade da API, documentação, taxas, compatibilidade com Replit.
Implementação: Integrar a API do gateway selecionado para processar pagamentos iniciados via endpoint da API de Checkout (Seção 2.2).
Tratamento de Webhooks: Implementar um endpoint de webhook básico (/webhooks/payment-gateway) para receber notificações do gateway (ex: sucesso de pagamento, falha). A segurança deste endpoint é crucial, exigindo validação de assinatura.
Atualizações de Status: Lógica para atualizar o status de Invoice e PaymentTransaction com base nos eventos de webhook recebidos. Armazenar IDs de transação relevantes do gateway.
2.4. Módulo de Gestão de Contratos:
Cadastro de Contratos:
Operações CRUD para registros de Contract.
Associação com um Client.
Campos: Título/Identificador do Contrato, Descrição, Valor/Montante, Data de Início, Data de Fim, Status (Rascunho, Ativo, Expirado, Cancelado), externalUserId (criador/proprietário vindo do sistema externo).
3. Arquitetura do Sistema no Replit

Esta seção define a arquitetura técnica de alto nível, escolhas de componentes e padrões de interação, especificamente adaptados para o ambiente Replit.

3.1. Backend:
Framework: Ambiente de execução Node.js fornecido pelo Replit.
Linguagem: TypeScript para segurança de tipos e melhor manutenibilidade.
Web Framework: NestJS (Recomendado). Escolhido por sua arquitetura modular, suporte nativo a TypeScript, injeção de dependência e alinhamento com padrões de aplicações empresariais (estrutura similar a Angular/Spring). Fornece módulos, controladores, serviços, guards, pipes, etc., facilitando o desenvolvimento organizado.
3.2. Frontend:
Framework: React (usando componentes funcionais e Hooks).
Linguagem: TypeScript (via TSX).
Build Tool/Dev Server: Vite. Escolhido por seu início de servidor extremamente rápido e Hot Module Replacement (HMR), melhorando significativamente a experiência de desenvolvimento em comparação com configurações tradicionais de Webpack.
UI Library: MUI ou Chakra UI (Recomendado). Selecionar uma com base na familiaridade da equipe e preferências de design. Fornece componentes pré-construídos e personalizáveis (Tabelas, Formulários, Modais, Layouts) para acelerar o desenvolvimento da UI.
3.3. Estrutura do Projeto:
Monorepo (Recomendado): Utilizar Replit Workspaces para gerenciar os códigos do backend (NestJS) e frontend (React/Vite) dentro de um único repositório.
Benefícios: Simplifica o gerenciamento de dependências (usando protocolos de workspace, se aplicável via pnpm/yarn workspaces), facilita o compartilhamento de código (ex: tipos compartilhados) e otimiza o processo de build/deploy dentro do Replit.
Exemplo de Estrutura:
/ (Raiz do Workspace Replit)
├── apps/
│   ├── backend/ (Aplicação NestJS)
│   └── frontend/ (Aplicação React/Vite)
├── packages/ (Opcional: para código/tipos compartilhados)
│   └── types/
├── package.json (Configuração raiz do workspace)
├── replit.nix (Configuração do ambiente)
└──.replit (Configuração específica do Replit)
3.4. Banco de Dados:
Serviço: PostgreSQL, provisionado através do recurso Replit DB Add-on. Isso simplifica a configuração e o gerenciamento do banco de dados dentro do ecossistema Replit.
ORM: Prisma. Escolhido por sua excelente integração com TypeScript, consultas de banco de dados type-safe, gerenciamento de migrações (Prisma Migrate) e linguagem de definição de esquema amigável ao desenvolvedor. O Prisma Client fornece métodos de acesso ao banco de dados auto-gerados e type-safe.
3.5. Tratamento de Autenticação e Autorização Externa:
Mecanismo: O sistema não implementará seu próprio login/signup. Ele depende inteiramente do sistema externo para autenticação. Espera-se que o sistema externo injete o contexto do usuário nas requisições feitas à API desta aplicação.
Recepção do Contexto do Usuário: Definir um contrato claro para como o contexto do usuário é recebido. Método preferencial: Cabeçalho HTTP padrão Authorization contendo um JWT (JSON Web Token) emitido pelo sistema externo. Alternativa: Cabeçalhos customizados como X-User-ID, X-User-Roles. A abordagem JWT é geralmente mais padrão e segura. Plataformas como Open edX utilizam extensivamente OAuth2 e JWT para comunicação inter-serviços e autenticação de usuários. Adotar uma abordagem similar de token JWT Bearer (Authorization: Bearer <jwt_token> ou Authorization: JWT <jwt_token> como visto em ) é recomendado. O payload do JWT deve conter informações essenciais do usuário como userId e roles/permissions.   
Lógica de Autorização no Backend:
Extração: Implementar um middleware ou um guard global no NestJS para interceptar requisições recebidas, extrair o JWT/cabeçalhos, validar a assinatura do JWT (se aplicável, usando a chave pública do sistema externo armazenada de forma segura) e parsear o contexto do usuário (userId, roles).
Guards: Utilizar NestJS Guards (ex: Guards baseados em Role, Guards de Propriedade) aplicados no nível do controlador ou do handler.
Lógica: Os Guards usarão o contexto do usuário extraído (userId, roles) para:
Verificar se o usuário possui a role/permissão necessária para acessar um endpoint específico (ex: apenas a role 'Admin' pode acessar endpoints de gerenciamento de usuários, se existissem).
Filtrar o acesso a dados com base na propriedade: Garantir que usuários só possam acessar/modificar recursos (Leads, Clientes, Contratos, Faturas) associados ao seu externalUserId ou recursos que eles tenham permissão explícita para ver/editar com base em suas roles (ex: um gerente pode ver todos os leads de sua equipe). As consultas Prisma incorporarão cláusulas where baseadas no externalUserId do contexto da requisição.
A dependência da autenticação externa desloca a complexidade da implementação da autenticação para o consumo seguro e aplicação da autorização com base no contexto fornecido. A validação robusta do token/cabeçalhos recebidos e a aplicação consistente das regras de autorização (via Guards) são requisitos críticos de segurança. A lógica de autorização encapsulada nos Guards mantém os controladores limpos e garante a aplicação uniforme das regras, enquanto a filtragem de dados deve ocorrer no nível da consulta ao banco de dados (cláusulas where do Prisma) usando o externalUserId.
4. Fases de Desenvolvimento do Projeto

Esta seção descreve a sequência lógica das atividades de desenvolvimento, dividindo o projeto em fases gerenciáveis. As durações são estimativas e podem variar.

4.1. Fase 1: Configuração do Ambiente e Setup Inicial (Duração Estimada: 1-2 Sprints)
Criação do Workspace Replit.
Configuração do replit.nix para pacotes de sistema necessários (versão do Node.js, ferramentas de build potenciais).
Inicialização da estrutura Monorepo (ex: usando pnpm workspaces).
Setup do Backend: Instalação do NestJS, TypeScript, Prisma e dependências centrais. Configuração da estrutura básica da aplicação NestJS.
Setup do Frontend: Instalação do React, Vite, TypeScript e biblioteca de UI escolhida (MUI/Chakra). Configuração da estrutura básica da aplicação React/Vite.
Setup do Banco de Dados: Adição do Add-on PostgreSQL do Replit. Configuração da DATABASE_URL nos Secrets do Replit. Execução do setup inicial do Prisma (prisma init).
Controle de Versão: Inicialização do repositório Git dentro do Replit, estabelecimento da estratégia de branching (ex: Gitflow).
Consideração básica de CI/CD dentro do Replit (ex: configuração dos comandos de run/build).
4.2. Fase 2: Desenvolvimento do Core do Backend (Duração Estimada: 3-5 Sprints)
Definição do Schema Prisma (Modelos da Seção 5.2). Execução das migrações iniciais.
Implementação dos Módulos NestJS para CRM, Financeiro, Contratos.
Desenvolvimento de Serviços e Controladores para operações CRUD básicas de todas as entidades do MVP (Lead, Client, Contact, Contract, ProductService, PriceTable, Invoice, InvoiceItem, Payment).
Implementação de DTOs (Data Transfer Objects) com validação (usando class-validator, class-transformer).
Implementação da Camada de Autenticação/Autorização Externa:
Middleware/Guard para extrair e validar o contexto do usuário (JWT/Headers).
Guards básicos de Role/Propriedade.
Integração do externalUserId nas operações CRUD e lógica de busca de dados (consultas Prisma).
Setup da estrutura básica de testes unitários/integração (ex: usando Jest, Supertest). Escrita dos testes iniciais para os CRUDs centrais.
4.3. Fase 3: Desenvolvimento do Core do Frontend (Duração Estimada: 3-4 Sprints)
Implementação do layout principal da aplicação (Navegação por Sidebar, Header, Área de Conteúdo).
Setup do roteamento no lado do cliente (usando React Router). Definição das rotas para as seções de CRM, Financeiro, Contratos.
Desenvolvimento de componentes de UI comuns/reutilizáveis:
Componente de Tabela de Dados (com props para dados, colunas, ordenação, filtragem, paginação).
Componentes de Formulário padronizados (aproveitando a biblioteca de UI, potencialmente com React Hook Form).
Componente Modal para confirmações, formulários simples.
Setup básico de estilização e tema usando a biblioteca de UI escolhida.
4.4. Fase 4: Integração Inicial Frontend-Backend (Duração Estimada: 2-3 Sprints)
Setup da camada de cliente/serviço de API no frontend (ex: usando axios ou fetch) para interagir com o backend NestJS.
Conexão das UIs de CRM (lista/funil de Leads, lista/detalhes de Clientes, lista/detalhes de Contatos) aos endpoints da API do backend. Garantir que a busca de dados respeite o contexto externalUserId passado implicitamente via autenticação.
Conexão da UI de Gestão de Contratos (lista/detalhes de Contratos) à API do backend.
Conexão das UIs Financeiras básicas (lista de Produtos/Serviços, lista de Faturas) à API do backend.
Implementação do tratamento de cabeçalhos de requisição da API (anexando automaticamente o token/contexto de autenticação se gerenciado no lado do cliente, embora idealmente o sistema externo lide com isso transparentemente via cookies ou injeção por proxy reverso).
Refinamento da lógica de autorização com base nos testes iniciais de integração.
4.5. Fase 5: Implementação do Checkout e Gateway de Pagamento (Duração Estimada: 2-4 Sprints)
Backend:
Desenvolvimento da lógica do endpoint da API /invoices/{id}/checkout.
Implementação da integração da camada de serviço com a API do gateway de pagamento selecionado (ex: criação de payment intents/sessions).
Desenvolvimento do endpoint /webhooks/payment-gateway, incluindo validação da requisição (verificação de assinatura) e parsing.
Implementação da lógica do modelo PaymentTransaction.
Implementação da lógica para atualizar o status de Invoice e Payment com base na iniciação do checkout e eventos de webhook.
Armazenamento seguro das chaves de API do gateway nos Secrets do Replit.
Frontend:
Desenvolvimento do fluxo de UI para iniciar o checkout a partir da visualização de uma Fatura.
Integração com a biblioteca/elementos do lado do cliente do gateway de pagamento, se necessário (ex: Stripe Elements para entrada de cartão).
Tratamento de respostas/redirecionamentos do gateway de pagamento.
4.6. Fase 6: Testes (Duração Estimada: 2-3 Sprints, em Paralelo)
Escrita de Testes Unitários abrangentes para serviços, controladores e guards do backend (foco na lógica de negócios, validação, autorização).
Escrita de Testes de Integração para endpoints da API, cobrindo operações CRUD, verificações de autorização e o fluxo de checkout.
Escrita de Testes Unitários/Componentes básicos do Frontend (ex: usando Jest, React Testing Library) para componentes de UI e lógica críticos.
Realização de testes End-to-End (E2E) manualmente ou usando ferramentas (ex: Cypress, Playwright, se viável no contexto Replit) para fluxos chave do usuário (criação/conversão de Lead, criação/pagamento de Fatura). Foco intenso na simulação do fluxo de pagamento.
4.7. Fase 7: Implantação e Refinamento (Duração Estimada: 1-2 Sprints)
Configuração das definições de Deployment do Replit (Comandos de build, Comando de run, Mapeamento de variáveis de ambiente a partir dos Secrets).
Realização da implantação inicial na infraestrutura de hospedagem do Replit.
Condução de Testes de Aceitação do Usuário (UAT) no ambiente implantado.
Correção de bugs e tratamento de feedback das fases de teste.
Finalização da documentação (READMEs, notas de uso da API).
Monitoramento de desempenho e otimização com base no uso inicial.
