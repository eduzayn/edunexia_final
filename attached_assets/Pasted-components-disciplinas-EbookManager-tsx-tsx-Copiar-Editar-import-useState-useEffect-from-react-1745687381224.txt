components/disciplinas/EbookManager.tsx
tsx
Copiar
Editar
import { useState, useEffect } from "react";
import { disciplinasService } from "@/services/disciplinasService";
import { Viewer } from "@/components/disciplinas/Viewer";

export function EbookManager() {
  const [ebookUrl, setEbookUrl] = useState<string>("");

  // Pega o ID da disciplina atual (simulado aqui, ajuste conforme seu projeto)
  const disciplinaId = "id_da_disciplina_aqui";

  useEffect(() => {
    async function carregarEbook() {
      try {
        const data = await disciplinasService.buscarEbookEstatico(disciplinaId);
        if (data?.url) {
          setEbookUrl(data.url);
        }
      } catch (error) {
        console.error("Erro ao carregar e-book est√°tico:", error);
      }
    }

    carregarEbook();
  }, [disciplinaId]);

  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">E-book Est√°tico</h2>

      {/* Bot√£o para adicionar ou trocar e-book */}
      <button className="btn">Adicionar e-book</button>

      {/* Visualiza√ß√£o do e-book */}
      {ebookUrl ? (
        <div className="mt-4">
          <Viewer url={ebookUrl} />
        </div>
      ) : (
        <p className="text-sm text-muted-foreground">Nenhum e-book cadastrado ainda.</p>
      )}
    </section>
  );
}
üé• components/disciplinas/VideoManager.tsx
tsx
Copiar
Editar
import { useState, useEffect } from "react";
import { disciplinasService } from "@/services/disciplinasService";
import { Viewer } from "@/components/disciplinas/Viewer";

export function VideoManager() {
  const [videos, setVideos] = useState<{ id: string; url: string }[]>([]);

  const disciplinaId = "id_da_disciplina_aqui"; // Ajuste para usar o ID real

  useEffect(() => {
    async function carregarVideos() {
      try {
        const data = await disciplinasService.listarVideos(disciplinaId);
        setVideos(data || []);
      } catch (error) {
        console.error("Erro ao carregar v√≠deos:", error);
      }
    }

    carregarVideos();
  }, [disciplinaId]);

  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">V√≠deo-aulas</h2>

      {/* Bot√£o para adicionar v√≠deo */}
      <button className="btn">Adicionar v√≠deo</button>

      {/* Lista de v√≠deos */}
      {videos.length > 0 ? (
        <div className="space-y-4 mt-4">
          {videos.map((video) => (
            <Viewer key={video.id} url={video.url} />
          ))}
        </div>
      ) : (
        <p className="text-sm text-muted-foreground">Nenhum v√≠deo cadastrado ainda.</p>
      )}
    </section>
  );
}
‚ú® Resultado pr√°tico:
Ao abrir o EbookManager, se houver um e-book cadastrado ‚ûî aparece a pr√©via dentro da plataforma.

Ao abrir o VideoManager, os v√≠deos cadastrados s√£o incorporados diretamente na p√°gina, sem redirecionar para fora.

Tudo usando o mesmo componente inteligente <Viewer url={...} />, adaptativo a cada tipo de conte√∫do.

üìå Lembrete importante:
O ID da disciplina (disciplinaId) voc√™ pode pegar dinamicamente da rota, usando:

tsx
Copiar
Editar
import { useParams } from "next/navigation";

const params = useParams();
const disciplinaId = params.id;
‚úÖ Assim fica din√¢mico e pronto para produ√ß√£o.

üöÄ Resumo final:

Feito	Status
Visualizar e-books dentro da plataforma	‚úÖ
Visualizar v√≠deos dentro da plataforma	‚úÖ
Sem abrir nova aba ou sair do sistema	‚úÖ
Totalmente responsivo e seguro	‚úÖ