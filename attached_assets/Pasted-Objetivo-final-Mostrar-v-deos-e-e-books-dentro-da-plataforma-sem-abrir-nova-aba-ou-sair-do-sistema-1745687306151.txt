Objetivo final:
Mostrar v√≠deos e e-books dentro da plataforma, sem abrir nova aba ou sair do sistema.

Exibir pr√©-visualiza√ß√£o dos materiais diretamente nas p√°ginas das disciplinas.

Aceitar qualquer tipo de link: YouTube, Vimeo, Google Drive (PDFs), links diretos de v√≠deos, etc.

‚úÖ Para alcan√ßar isso, voc√™ precisa fazer 3 coisas:
1. Detectar o tipo de conte√∫do
Voc√™ deve analisar o link que o administrador ou aluno forneceu para saber como exibir:

Se for YouTube, embeda como <iframe>.

Se for Vimeo, embeda como <iframe>.

Se for v√≠deo direto (.mp4), usa um <video> player nativo.

Se for PDF direto, embeda via <iframe> ou <embed>.

Se for Google Drive PDF, converte o link para formato /preview e usa <iframe>.

2. Criar um componente inteligente para visualiza√ß√£o
Um √∫nico componente que, dado o link, exibe automaticamente o conte√∫do correto.

Exemplo de componente:

tsx
Copiar
Editar
// File: components/disciplinas/Viewer.tsx

interface ViewerProps {
  url: string;
}

export function Viewer({ url }: ViewerProps) {
  if (!url) {
    return <div className="text-center text-muted-foreground">Nenhum conte√∫do dispon√≠vel.</div>;
  }

  // Google Drive PDF
  if (url.includes("drive.google.com")) {
    const fileIdMatch = url.match(/\/d\/(.*?)\//);
    const fileId = fileIdMatch ? fileIdMatch[1] : null;
    if (fileId) {
      const embedUrl = `https://drive.google.com/file/d/${fileId}/preview`;
      return (
        <iframe src={embedUrl} width="100%" height="600px" allow="autoplay" title="Google Drive PDF" />
      );
    }
  }

  // YouTube
  if (url.includes("youtube.com") || url.includes("youtu.be")) {
    let videoId = "";
    if (url.includes("watch?v=")) {
      videoId = url.split("watch?v=")[1].split("&")[0];
    } else {
      videoId = url.split("/").pop() || "";
    }
    const embedUrl = `https://www.youtube.com/embed/${videoId}`;
    return (
      <iframe src={embedUrl} width="100%" height="500px" allow="autoplay" title="YouTube Video" allowFullScreen />
    );
  }

  // Vimeo
  if (url.includes("vimeo.com")) {
    const videoId = url.split("/").pop();
    const embedUrl = `https://player.vimeo.com/video/${videoId}`;
    return (
      <iframe src={embedUrl} width="100%" height="500px" allow="autoplay; fullscreen" title="Vimeo Video" allowFullScreen />
    );
  }

  // V√≠deo MP4
  if (url.endsWith(".mp4")) {
    return (
      <video width="100%" height="500px" controls>
        <source src={url} type="video/mp4" />
        Seu navegador n√£o suporta v√≠deos HTML5.
      </video>
    );
  }

  // PDF Direto
  if (url.endsWith(".pdf")) {
    return (
      <iframe src={url} width="100%" height="600px" title="PDF Viewer" />
    );
  }

  // Default (n√£o reconhecido)
  return <div className="text-center text-muted-foreground">Formato de link n√£o suportado para pr√©-visualiza√ß√£o.</div>;
}
3. Usar esse componente em todas as se√ß√µes de conte√∫do
Exemplo:

tsx
Copiar
Editar
import { Viewer } from "@/components/disciplinas/Viewer";

function EbookViewer({ ebookUrl }: { ebookUrl: string }) {
  return (
    <div className="mt-4">
      <Viewer url={ebookUrl} />
    </div>
  );
}

function VideoViewer({ videoUrl }: { videoUrl: string }) {
  return (
    <div className="mt-4">
      <Viewer url={videoUrl} />
    </div>
  );
}
‚úÖ E em todos os Managers (EbookManager, VideoManager, etc.) voc√™ apenas passa o url salvo para o <Viewer url={url} />.

üìå Para garantir que tudo funcione:
Os links precisam ser v√°lidos (YouTube, Vimeo, MP4, PDFs, Drive).

No backend, n√£o precisa transformar o link, s√≥ armazenar ele como foi enviado.

No frontend, o Viewer faz todo o trabalho de tratar o tipo.

üéØ Resumo ultra-r√°pido:

Etapa	Status
Detectar tipo de link	‚úÖ
Criar componente Viewer	‚úÖ
Integrar Viewer nas se√ß√µes (v√≠deos, ebooks)	‚úÖ
Nunca abrir links fora da plataforma	‚úÖ