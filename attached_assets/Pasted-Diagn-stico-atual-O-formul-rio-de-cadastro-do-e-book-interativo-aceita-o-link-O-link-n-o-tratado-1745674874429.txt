Diagn√≥stico atual
O formul√°rio de cadastro do e-book interativo aceita o link.

O link n√£o √© tratado dinamicamente (ex: transformar link de Drive em embed).

N√£o existe um interpretador de tipo de m√≠dia (PDF, MP4, YouTube, Vimeo, etc.).

O backend salva, mas n√£o valida nem formata o link.

O frontend n√£o renderiza corretamente dependendo do tipo de conte√∫do.

Nenhuma mensagem de erro aparece se o link for inv√°lido ou n√£o manipul√°vel.

üõ†Ô∏è Arquivos que voc√™ precisa alterar
1. client/src/components/EbookViewer.tsx (ou equivalente)
üëâ Respons√°vel por renderizar o material na disciplina

Altera√ß√£o necess√°ria:
Detectar automaticamente o tipo de URL.

Renderizar iframe, embed, ou video conforme o tipo.

tsx
Copiar
Editar
function renderViewer(url: string) {
  if (!url) {
    return <div>URL do e-book n√£o dispon√≠vel.</div>;
  }

  // Verifica se √© Google Drive
  if (url.includes("drive.google.com")) {
    const fileIdMatch = url.match(/\/d\/(.*?)\//);
    const fileId = fileIdMatch ? fileIdMatch[1] : null;
    if (fileId) {
      const embedUrl = `https://drive.google.com/file/d/${fileId}/preview`;
      return (
        <iframe
          src={embedUrl}
          width="100%"
          height="600px"
          allow="autoplay"
          style={{ border: 'none' }}
          title="Ebook Drive"
        />
      );
    }
  }

  // Verifica se √© um arquivo MP4
  if (url.endsWith(".mp4")) {
    return (
      <video width="100%" height="500px" controls>
        <source src={url} type="video/mp4" />
        Seu navegador n√£o suporta v√≠deos HTML5.
      </video>
    );
  }

  // Verifica se √© YouTube
  if (url.includes("youtube.com") || url.includes("youtu.be")) {
    let videoId = "";
    if (url.includes("watch?v=")) {
      videoId = url.split("watch?v=")[1].split("&")[0];
    } else {
      videoId = url.split("/").pop() || "";
    }
    const embedUrl = `https://www.youtube.com/embed/${videoId}`;
    return (
      <iframe
        width="100%"
        height="500px"
        src={embedUrl}
        title="V√≠deo YouTube"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen
        frameBorder="0"
      />
    );
  }

  // Verifica se √© Vimeo
  if (url.includes("vimeo.com")) {
    const videoId = url.split("/").pop();
    const embedUrl = `https://player.vimeo.com/video/${videoId}`;
    return (
      <iframe
        width="100%"
        height="500px"
        src={embedUrl}
        title="V√≠deo Vimeo"
        allow="autoplay; fullscreen"
        allowFullScreen
        frameBorder="0"
      />
    );
  }

  // Se for PDF direto
  if (url.endsWith(".pdf")) {
    return (
      <iframe
        src={url}
        width="100%"
        height="600px"
        style={{ border: 'none' }}
        title="Visualizador PDF"
      />
    );
  }

  // Caso contr√°rio, mostra erro
  return <div>Formato de link n√£o suportado ou inv√°lido.</div>;
}
No JSX do componente:

tsx
Copiar
Editar
{renderViewer(urlDoEbook)}
2. server/api/ebooks.ts ou server/controllers/ebooksController.ts
üëâ Respons√°vel por salvar os dados

Altera√ß√£o necess√°ria:
Sempre retornar JSON, mesmo que o link esteja errado ou vazio.

N√£o tentar validar ou transformar no backend. Deixe isso para o frontend.

ts
Copiar
Editar
export async function adicionarEbook(req, res) {
  try {
    const { url, titulo, descricao } = req.body;

    if (!url) {
      return res.status(400).json({ success: false, error: "URL do e-book √© obrigat√≥ria." });
    }

    // Aqui voc√™ s√≥ salva o link como est√°.
    const novoEbook = {
      titulo,
      descricao,
      url,
      criadoEm: new Date(),
    };

    // Salvar no banco (simulado aqui)
    // await database.insert('ebooks', novoEbook);

    return res.status(200).json({ success: true, ebook: novoEbook });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ success: false, error: "Erro interno ao salvar e-book." });
  }
}
3. client/src/pages/admin/disciplinas/[id]/content.tsx
üëâ Onde carrega os dados dos e-books interativos

Altera√ß√£o necess√°ria:
Garantir que sempre tenta renderizar, mesmo que o URL venha nulo, evitando quebra da tela.

Usar o renderViewer() que expliquei acima.

‚úÖ Depois dessas altera√ß√µes:
Links do Drive ser√£o abertos como visualiza√ß√£o interna (preview).

PDFs diretos ser√£o exibidos embutidos no portal.

MP4s ser√£o reproduzidos diretamente via <video>.

YouTube e Vimeo ser√£o carregados no player embed.

Aluno n√£o precisar√° sair da plataforma.

Nenhum erro JSON inv√°lido ou branco mais aparecer√°.

üìã Resumo dos Arquivos que devem ser modificados:

Arquivo	O que fazer
client/src/components/EbookViewer.tsx	Criar fun√ß√£o renderViewer(url) para tratar todos os links dinamicamente
client/src/pages/admin/disciplinas/[id]/content.tsx	Usar o renderViewer na exibi√ß√£o do material
server/api/ebooks.ts ou server/controllers/ebooksController.ts	Corrigir retorno do backend para sempre ser JSON
