Aqui est√° o AvaliacaoFinalManager.tsx j√° pronto para voc√™ colar no projeto, no mesmo padr√£o do SimuladoManager, s√≥ adaptado para:

Limite de 10 quest√µes.

Endpoints espec√≠ficos da Avalia√ß√£o Final.

Nome do m√≥dulo correto ("Avalia√ß√£o Final").

üìÑ Arquivo: components/disciplinas/AvaliacaoFinalManager.tsx
tsx
Copiar
Editar
import { useState, useEffect } from "react";
import { disciplinasService } from "@/services/disciplinasService";
import { useParams } from "next/navigation";

interface Questao {
  id: string;
  enunciado: string;
  alternativas: string[];
  respostaCorreta: number;
}

export function AvaliacaoFinalManager() {
  const params = useParams();
  const disciplinaId = params.id as string;

  const [questoes, setQuestoes] = useState<Questao[]>([]);
  const [showModal, setShowModal] = useState(false);

  // Campos do formul√°rio
  const [enunciado, setEnunciado] = useState("");
  const [alternativas, setAlternativas] = useState(["", "", "", ""]);
  const [respostaCorreta, setRespostaCorreta] = useState(0);

  useEffect(() => {
    async function carregarQuestoes() {
      try {
        const data = await disciplinasService.listarAvaliacaoFinal(disciplinaId);
        setQuestoes(data || []);
      } catch (error) {
        console.error("Erro ao carregar quest√µes da avalia√ß√£o final:", error);
      }
    }

    carregarQuestoes();
  }, [disciplinaId]);

  async function handleSalvarQuestao() {
    if (questoes.length >= 10) {
      alert("A Avalia√ß√£o Final permite no m√°ximo 10 quest√µes.");
      return;
    }

    try {
      const novaQuestao = {
        enunciado,
        alternativas,
        respostaCorreta,
      };
      await disciplinasService.adicionarQuestaoAvaliacaoFinal(disciplinaId, novaQuestao);

      setQuestoes((prev) => [...prev, { id: String(Math.random()), ...novaQuestao }]);
      setShowModal(false);
      setEnunciado("");
      setAlternativas(["", "", "", ""]);
      setRespostaCorreta(0);
    } catch (error) {
      console.error("Erro ao adicionar quest√£o:", error);
    }
  }

  function atualizarAlternativa(index: number, value: string) {
    const novasAlternativas = [...alternativas];
    novasAlternativas[index] = value;
    setAlternativas(novasAlternativas);
  }

  return (
    <section className="border rounded p-4 space-y-2">
      <h2 className="text-lg font-semibold">Avalia√ß√£o Final</h2>

      <button className="btn" onClick={() => setShowModal(true)}>Adicionar quest√£o</button>

      {/* Lista de quest√µes */}
      {questoes.length > 0 ? (
        <div className="space-y-4 mt-4">
          {questoes.map((q, index) => (
            <div key={q.id} className="border p-2 rounded">
              <p className="font-semibold">{index + 1}. {q.enunciado}</p>
              <ul className="list-disc list-inside ml-4 text-sm text-muted-foreground">
                {q.alternativas.map((alt, i) => (
                  <li key={i} className={i === q.respostaCorreta ? "font-bold text-primary" : ""}>
                    {alt}
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      ) : (
        <p className="text-sm text-muted-foreground">Nenhuma quest√£o cadastrada ainda.</p>
      )}

      {/* Modal de nova quest√£o */}
      {showModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded space-y-4 w-full max-w-md">
            <h3 className="text-lg font-semibold">Adicionar Nova Quest√£o</h3>

            <div>
              <label className="block text-sm font-medium">Enunciado</label>
              <textarea
                className="input w-full"
                rows={3}
                value={enunciado}
                onChange={(e) => setEnunciado(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              {alternativas.map((alt, index) => (
                <div key={index}>
                  <label className="block text-sm font-medium">Alternativa {index + 1}</label>
                  <input
                    className="input w-full"
                    value={alt}
                    onChange={(e) => atualizarAlternativa(index, e.target.value)}
                  />
                </div>
              ))}
            </div>

            <div>
              <label className="block text-sm font-medium">Resposta Correta (N√∫mero de 1 a 4)</label>
              <input
                type="number"
                min={1}
                max={4}
                className="input w-full"
                value={respostaCorreta + 1}
                onChange={(e) => setRespostaCorreta(Number(e.target.value) - 1)}
              />
            </div>

            <div className="flex justify-end gap-2">
              <button className="btn" onClick={() => setShowModal(false)}>Cancelar</button>
              <button className="btn" onClick={handleSalvarQuestao}>Salvar</button>
            </div>
          </div>
        </div>
      )}
    </section>
  );
}
üì¶ O que esse arquivo faz:
Exibe todas as quest√µes da Avalia√ß√£o Final.

Permite adicionar novas quest√µes via Modal.

Valida que n√£o passem de 10 quest√µes.

Integra direto ao disciplinasService (listarAvaliacaoFinal, adicionarQuestaoAvaliacaoFinal).

