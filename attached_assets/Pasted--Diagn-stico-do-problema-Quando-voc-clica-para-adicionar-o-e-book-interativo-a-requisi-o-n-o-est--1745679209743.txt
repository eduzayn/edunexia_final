 DiagnÃ³stico do problema
Quando vocÃª clica para adicionar o e-book interativo, a requisiÃ§Ã£o nÃ£o estÃ¡ chegando em uma API de backend real que devolva JSON.

Em vez disso, a resposta que vocÃª recebe Ã© um HTML de erro do Vite/Replit (<!DOCTYPE html>) â€” ou seja, nÃ£o existe uma rota configurada para receber essa chamada no ambiente de produÃ§Ã£o do Replit.

O problema real Ã©:

A rota de API onde deveria salvar o e-book interativo nÃ£o existe ou estÃ¡ quebrada no ambiente de deploy.

ğŸ›  Causa raiz
Provavelmente o seu cÃ³digo frontend estÃ¡ fazendo algo como:

ts
Copiar
Editar
fetch('/api/disciplines/:id/ebooks', {...})
SÃ³ que o servidor do Replit (no ambiente de produÃ§Ã£o) nÃ£o tem essa rota /api/disciplines/:id/ebooks implementada.

O Replit estÃ¡ tentando resolver o /api/... como se fosse um arquivo ou pÃ¡gina estÃ¡tica, e te devolve um HTML de erro (do prÃ³prio Vite) em vez de um JSON da API.

âœ… SoluÃ§Ã£o definitiva
VocÃª precisa criar no backend a rota correspondente para receber a requisiÃ§Ã£o do e-book interativo.

1. Criar ou corrigir o endpoint no backend
Em server/api/ebooks.ts (ou similar):

ts
Copiar
Editar
import { serve } from "some-server-lib"; // Se for Deno ou Node

serve(async (req) => {
  const { pathname } = new URL(req.url);

  if (pathname.startsWith("/api/disciplines/") && pathname.endsWith("/ebooks")) {
    if (req.method === "POST") {
      const body = await req.json();
      // Aqui vocÃª salva no banco, ou apenas simula salvamento
      return new Response(JSON.stringify({ success: true, ebook: body }), {
        headers: { "Content-Type": "application/json" },
      });
    }
  }

  return new Response("Not Found", { status: 404 });
});
âœ… Essa rota /api/disciplines/:id/ebooks precisa existir no servidor para responder corretamente.

2. Garantir que o fetch aponte para o domÃ­nio correto
Se o frontend estiver rodando em replit.dev, o fetch deveria chamar:

ts
Copiar
Editar
fetch('/api/disciplines/33/ebooks', {...})
ou

ts
Copiar
Editar
fetch(`${import.meta.env.VITE_BACKEND_URL}/api/disciplines/33/ebooks`, {...})
caso vocÃª esteja usando variÃ¡veis de ambiente.

ğŸ“‹ Resumo do que precisa ser feito:

Etapa	AÃ§Ã£o
Backend	Criar a rota /api/disciplines/:id/ebooks
Backend	Garantir que a resposta sempre seja application/json
Frontend	Confirmar que a URL do fetch Ã© correta e atinge a API de verdade
Frontend	Continuar renderizando o viewer (iframe, video, embed) conforme o tipo do link
ğŸ”¥ Resumo tÃ©cnico (em 1 linha)
O problema nÃ£o Ã© no frontend agora, Ã© que o servidor nÃ£o tem a rota /api/disciplines/:id/ebooks configurada.