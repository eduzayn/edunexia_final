// üìÅ File: client/src/components/disciplinas/SimuladoManager.tsx

import { useEffect, useState } from "react";
import { Simulado, Questao } from "@/types/pedagogico";
import { getSimulado, addSimulado } from "@/api/pedagogico";
import { useParams } from "next/navigation";

export function SimuladoManager() {
  const { id: disciplinaId } = useParams();
  const [questoes, setQuestoes] = useState<Questao[]>([]);
  const [pergunta, setPergunta] = useState("");
  const [alternativas, setAlternativas] = useState(["", "", "", ""]);
  const [respostaCorreta, setRespostaCorreta] = useState(0);

  useEffect(() => {
    if (!disciplinaId) return;
    getSimulado(disciplinaId)
      .then((simulado) => {
        if (simulado) setQuestoes(simulado.questoes);
      })
      .catch(console.error);
  }, [disciplinaId]);

  const adicionarQuestao = async () => {
    if (!pergunta || alternativas.some((a) => !a)) return;

    const nova: Questao = {
      id: crypto.randomUUID(),
      pergunta,
      alternativas,
      respostaCorreta,
    };

    const novaLista = [...questoes, nova];
    setQuestoes(novaLista);
    setPergunta("");
    setAlternativas(["", "", "", ""]);
    setRespostaCorreta(0);

    try {
      await addSimulado(disciplinaId, { questoes: novaLista });
    } catch (e) {
      alert("Erro ao salvar quest√£o");
    }
  };

  return (
    <section className="bg-white p-4 rounded shadow space-y-4">
      <h2 className="text-lg font-semibold">Simulado (at√© 30 quest√µes)</h2>

      <div className="space-y-2">
        <input
          value={pergunta}
          onChange={(e) => setPergunta(e.target.value)}
          placeholder="Digite a pergunta"
          className="border p-2 w-full rounded"
        />
        {alternativas.map((alt, index) => (
          <div key={index} className="flex items-center gap-2">
            <input
              type="radio"
              name="resposta"
              checked={respostaCorreta === index}
              onChange={() => setRespostaCorreta(index)}
            />
            <input
              value={alt}
              onChange={(e) => {
                const novas = [...alternativas];
                novas[index] = e.target.value;
                setAlternativas(novas);
              }}
              placeholder={`Alternativa ${index + 1}`}
              className="border p-2 flex-1 rounded"
            />
          </div>
        ))}
        <button
          onClick={adicionarQuestao}
          className="bg-blue-600 text-white px-4 py-2 rounded"
        >
          Adicionar Quest√£o
        </button>
      </div>

      <div>
        <h3 className="font-semibold mt-6">Quest√µes cadastradas:</h3>
        <ol className="list-decimal pl-4 space-y-2">
          {questoes.map((q, idx) => (
            <li key={q.id}>
              <strong>{q.pergunta}</strong>
              <ul className="list-disc ml-6">
                {q.alternativas.map((a, i) => (
                  <li
                    key={i}
                    className={i === q.respostaCorreta ? "text-green-600 font-bold" : ""}
                  >
                    {a}
                  </li>
                ))}
              </ul>
            </li>
          ))}
        </ol>
      </div>
    </section>
  );
}
